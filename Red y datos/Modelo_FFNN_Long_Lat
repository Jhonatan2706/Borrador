{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cargar Librerías\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "import tensorflow as tf\n",
    "import csv\n",
    "%matplotlib inline\n",
    "#plt.rcParams['figure.figsize'] = (16, 9)\n",
    "#plt.style.use('fast')\n",
    "\n",
    "from sklearn.metrics import r2_score\n",
    "from tensorflow.python.keras.models import Sequential\n",
    "from tensorflow.python.keras.layers import Dense,Activation,Flatten\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#SACAR R2 ENTRE VALOR PREDIJO (EL MAS CERCANO, EL MÍNIMO) VS REAL\n",
    "#AGREGAR VARIABLE \"MARCA\" AGRUPANDO CON LOS MÁS SIGINFICATIVOS Y \"OTROS\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>DiaSem</th>\n",
       "      <th>Mes</th>\n",
       "      <th>Hora</th>\n",
       "      <th>TipoV</th>\n",
       "      <th>Marca</th>\n",
       "      <th>Comuna</th>\n",
       "      <th>Longitud</th>\n",
       "      <th>Latitud</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delito</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>-71.364279</td>\n",
       "      <td>-33.066009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>-71.449283</td>\n",
       "      <td>-32.506328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-71.244152</td>\n",
       "      <td>-32.885247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>-71.544414</td>\n",
       "      <td>-32.958467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>-71.607311</td>\n",
       "      <td>-33.564088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>-71.546929</td>\n",
       "      <td>-33.022157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>-71.586060</td>\n",
       "      <td>-33.033630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>3</td>\n",
       "      <td>-71.334306</td>\n",
       "      <td>-33.152032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>-71.578250</td>\n",
       "      <td>-33.030275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>01-01-14</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>-71.518253</td>\n",
       "      <td>-33.036472</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Fecha  DiaSem  Mes  Hora  TipoV  Marca  Comuna   Longitud  \\\n",
       "Delito                                                                 \n",
       "1       01-01-14       3    1     1      2      2       5 -71.364279   \n",
       "2       01-01-14       3    1     4      1     13      12 -71.449283   \n",
       "3       01-01-14       3    1     5      1      1       2 -71.244152   \n",
       "4       01-01-14       3    1     5      4     17       1 -71.544414   \n",
       "5       01-01-14       3    1     6      1      2       4 -71.607311   \n",
       "6       01-01-14       3    1     8      1      5       1 -71.546929   \n",
       "7       01-01-14       3    1     9      3      3       2 -71.586060   \n",
       "8       01-01-14       3    1    11      5     10       3 -71.334306   \n",
       "9       01-01-14       3    1    13      1      2       1 -71.578250   \n",
       "10      01-01-14       3    1    22      2      7       1 -71.518253   \n",
       "\n",
       "          Latitud  \n",
       "Delito             \n",
       "1      -33.066009  \n",
       "2      -32.506328  \n",
       "3      -32.885247  \n",
       "4      -32.958467  \n",
       "5      -33.564088  \n",
       "6      -33.022157  \n",
       "7      -33.033630  \n",
       "8      -33.152032  \n",
       "9      -33.030275  \n",
       "10     -33.036472  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cargar archivo .CSV con datos de delitos\n",
    "#Si es necesario, aún no se puede agregar más variables\n",
    "\n",
    "df = pd.read_csv(\"/Users/j.artigasalegra/Documents/tesis/Solicitud_Base_Datos/Base_Dato_Con_Coorednadas/DATOS GEOCODIFICADOS/DATOS_RED.csv\",  parse_dates=[0], index_col=0, names=['Delito', 'Fecha', 'DiaSem', 'Mes', 'Hora', 'TipoV','Marca', 'Comuna', 'Longitud', 'Latitud'])\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DiaSem</th>\n",
       "      <th>Mes</th>\n",
       "      <th>Hora</th>\n",
       "      <th>TipoV</th>\n",
       "      <th>Marca</th>\n",
       "      <th>Comuna</th>\n",
       "      <th>Longitud</th>\n",
       "      <th>Latitud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "      <td>4022.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.002984</td>\n",
       "      <td>6.430134</td>\n",
       "      <td>11.637494</td>\n",
       "      <td>2.043511</td>\n",
       "      <td>6.966932</td>\n",
       "      <td>3.726753</td>\n",
       "      <td>-71.592492</td>\n",
       "      <td>-33.004698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.986272</td>\n",
       "      <td>3.425545</td>\n",
       "      <td>7.444756</td>\n",
       "      <td>1.572850</td>\n",
       "      <td>6.061416</td>\n",
       "      <td>3.422598</td>\n",
       "      <td>2.478320</td>\n",
       "      <td>0.432682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-109.440402</td>\n",
       "      <td>-33.921019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-71.562892</td>\n",
       "      <td>-33.049376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>-71.519649</td>\n",
       "      <td>-33.029141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>-71.400370</td>\n",
       "      <td>-32.975965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>-70.127559</td>\n",
       "      <td>-27.073739</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            DiaSem          Mes         Hora        TipoV        Marca  \\\n",
       "count  4022.000000  4022.000000  4022.000000  4022.000000  4022.000000   \n",
       "mean      4.002984     6.430134    11.637494     2.043511     6.966932   \n",
       "std       1.986272     3.425545     7.444756     1.572850     6.061416   \n",
       "min       1.000000     1.000000     0.000000     1.000000     1.000000   \n",
       "25%       2.000000     4.000000     5.000000     1.000000     2.000000   \n",
       "50%       4.000000     6.000000    11.000000     1.000000     4.000000   \n",
       "75%       6.000000     9.000000    19.000000     3.000000    12.000000   \n",
       "max       7.000000    12.000000    23.000000     6.000000    17.000000   \n",
       "\n",
       "            Comuna     Longitud      Latitud  \n",
       "count  4022.000000  4022.000000  4022.000000  \n",
       "mean      3.726753   -71.592492   -33.004698  \n",
       "std       3.422598     2.478320     0.432682  \n",
       "min       1.000000  -109.440402   -33.921019  \n",
       "25%       1.000000   -71.562892   -33.049376  \n",
       "50%       2.000000   -71.519649   -33.029141  \n",
       "75%       5.000000   -71.400370   -32.975965  \n",
       "max      12.000000   -70.127559   -27.073739  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4022, 8)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DiaSem</th>\n",
       "      <th>Mes</th>\n",
       "      <th>Hora</th>\n",
       "      <th>TipoV</th>\n",
       "      <th>Marca</th>\n",
       "      <th>Comuna</th>\n",
       "      <th>Longitud</th>\n",
       "      <th>Latitud</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delito</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>-71.364279</td>\n",
       "      <td>-33.066009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>-71.449283</td>\n",
       "      <td>-32.506328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-71.244152</td>\n",
       "      <td>-32.885247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>-71.544414</td>\n",
       "      <td>-32.958467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>-71.607311</td>\n",
       "      <td>-33.564088</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        DiaSem  Mes  Hora  TipoV  Marca  Comuna   Longitud    Latitud\n",
       "Delito                                                               \n",
       "1            3    1     1      2      2       5 -71.364279 -33.066009\n",
       "2            3    1     4      1     13      12 -71.449283 -32.506328\n",
       "3            3    1     5      1      1       2 -71.244152 -32.885247\n",
       "4            3    1     5      4     17       1 -71.544414 -32.958467\n",
       "5            3    1     6      1      2       4 -71.607311 -33.564088"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop(columns=['Fecha'])\n",
    "print(df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convertir series a aprendizaje supervizado\n",
    "#Aprendizaje supervisado será utilizando los 15 días previos para predecir el actual delito (latitud y longitud)\n",
    "\n",
    "def series_to_supervised(data, n_in=1, n_out=2, dropnan=True):\n",
    "    n_vars = 1 if type(data) is list else data.shape[1]\n",
    "    df = pd.DataFrame(data)\n",
    "    cols, names = list(), list()\n",
    "    # input sequence (t-n, ... t-1)\n",
    "    for i in range(n_in, 0, -1):\n",
    "        cols.append(df.shift(i))\n",
    "        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n",
    "    # forecast sequence (t, t+1, ... t+n)\n",
    "    for i in range(0, n_out):\n",
    "        cols.append(df.shift(-i))\n",
    "        if i == 0:\n",
    "            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n",
    "        else:\n",
    "            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n",
    "    # put it all together\n",
    "    agg = pd.concat(cols, axis=1)\n",
    "    agg.columns = names\n",
    "    # drop rows with NaN values\n",
    "    if dropnan:\n",
    "        agg.dropna(inplace=True)\n",
    "    return agg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4007, 128)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1(t-15)</th>\n",
       "      <th>var2(t-15)</th>\n",
       "      <th>var3(t-15)</th>\n",
       "      <th>var4(t-15)</th>\n",
       "      <th>var5(t-15)</th>\n",
       "      <th>var6(t-15)</th>\n",
       "      <th>var7(t-15)</th>\n",
       "      <th>var8(t-15)</th>\n",
       "      <th>var1(t-14)</th>\n",
       "      <th>var2(t-14)</th>\n",
       "      <th>...</th>\n",
       "      <th>var7(t-1)</th>\n",
       "      <th>var8(t-1)</th>\n",
       "      <th>var1(t)</th>\n",
       "      <th>var2(t)</th>\n",
       "      <th>var3(t)</th>\n",
       "      <th>var4(t)</th>\n",
       "      <th>var5(t)</th>\n",
       "      <th>var6(t)</th>\n",
       "      <th>var7(t)</th>\n",
       "      <th>var8(t)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.968541</td>\n",
       "      <td>0.124869</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.963500</td>\n",
       "      <td>0.131588</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.4375</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.963912</td>\n",
       "      <td>0.144309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.173913</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.7500</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.966379</td>\n",
       "      <td>0.206606</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.963912</td>\n",
       "      <td>0.144309</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.1250</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.963752</td>\n",
       "      <td>0.132321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.963959</td>\n",
       "      <td>0.140575</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.963752</td>\n",
       "      <td>0.132321</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.956522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3750</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.962417</td>\n",
       "      <td>0.053650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.260870</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.962359</td>\n",
       "      <td>0.052128</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.962417</td>\n",
       "      <td>0.053650</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.956522</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.965685</td>\n",
       "      <td>0.134938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 128 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    var1(t-15)  var2(t-15)  var3(t-15)  var4(t-15)  var5(t-15)  var6(t-15)  \\\n",
       "15    0.333333         0.0    0.043478         0.2      0.0625    0.363636   \n",
       "16    0.333333         0.0    0.173913         0.0      0.7500    1.000000   \n",
       "17    0.333333         0.0    0.217391         0.0      0.0000    0.090909   \n",
       "18    0.333333         0.0    0.217391         0.6      1.0000    0.000000   \n",
       "19    0.333333         0.0    0.260870         0.0      0.0625    0.272727   \n",
       "\n",
       "    var7(t-15)  var8(t-15)  var1(t-14)  var2(t-14)  ...  var7(t-1)  var8(t-1)  \\\n",
       "15    0.968541    0.124869    0.333333         0.0  ...   0.963500   0.131588   \n",
       "16    0.966379    0.206606    0.333333         0.0  ...   0.963912   0.144309   \n",
       "17    0.971597    0.151268    0.333333         0.0  ...   0.971597   0.151268   \n",
       "18    0.963959    0.140575    0.333333         0.0  ...   0.963752   0.132321   \n",
       "19    0.962359    0.052128    0.333333         0.0  ...   0.962417   0.053650   \n",
       "\n",
       "     var1(t)  var2(t)   var3(t)  var4(t)  var5(t)   var6(t)   var7(t)  \\\n",
       "15  0.666667      0.0  0.782609      0.0   0.4375  0.454545  0.963912   \n",
       "16  0.666667      0.0  0.782609      0.0   0.1250  0.090909  0.971597   \n",
       "17  0.666667      0.0  0.913043      0.0   0.0625  0.000000  0.963752   \n",
       "18  0.666667      0.0  0.956522      0.0   0.3750  0.090909  0.962417   \n",
       "19  0.666667      0.0  0.956522      1.0   1.0000  0.000000  0.965685   \n",
       "\n",
       "     var8(t)  \n",
       "15  0.144309  \n",
       "16  0.151268  \n",
       "17  0.132321  \n",
       "18  0.053650  \n",
       "19  0.134938  \n",
       "\n",
       "[5 rows x 128 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PASOS = 15\n",
    "\n",
    "data = df.values\n",
    "data = data.astype('float32')\n",
    "scaler = MinMaxScaler()\n",
    "data = scaler.fit_transform(data[:, :8])\n",
    "data = pd.DataFrame(data)\n",
    "data.columns = data.columns\n",
    "data=data.rename(columns = {0:'Diasem', 1:'Mes', 2:'Hora', 3:'TipoV', 4:'Marca', 5:'Comuna', 6:'Longitud', 7:'Latitud'})\n",
    "data.head()\n",
    "\n",
    "scaledMerge= data\n",
    "\n",
    "# frame as supervised learning\n",
    "reframed = series_to_supervised(scaledMerge, PASOS, 1)\n",
    "print(reframed.shape)\n",
    "reframed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4007, 122)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>var1(t-15)</th>\n",
       "      <th>var2(t-15)</th>\n",
       "      <th>var3(t-15)</th>\n",
       "      <th>var4(t-15)</th>\n",
       "      <th>var5(t-15)</th>\n",
       "      <th>var6(t-15)</th>\n",
       "      <th>var7(t-15)</th>\n",
       "      <th>var8(t-15)</th>\n",
       "      <th>var1(t-14)</th>\n",
       "      <th>var2(t-14)</th>\n",
       "      <th>...</th>\n",
       "      <th>var1(t-1)</th>\n",
       "      <th>var2(t-1)</th>\n",
       "      <th>var3(t-1)</th>\n",
       "      <th>var4(t-1)</th>\n",
       "      <th>var5(t-1)</th>\n",
       "      <th>var6(t-1)</th>\n",
       "      <th>var7(t-1)</th>\n",
       "      <th>var8(t-1)</th>\n",
       "      <th>var7(t)</th>\n",
       "      <th>var8(t)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.363636</td>\n",
       "      <td>0.968541</td>\n",
       "      <td>0.124869</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.434783</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3125</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.963500</td>\n",
       "      <td>0.131588</td>\n",
       "      <td>0.963912</td>\n",
       "      <td>0.144309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.173913</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.7500</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.966379</td>\n",
       "      <td>0.206606</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.4375</td>\n",
       "      <td>0.454545</td>\n",
       "      <td>0.963912</td>\n",
       "      <td>0.144309</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.1250</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.971597</td>\n",
       "      <td>0.151268</td>\n",
       "      <td>0.963752</td>\n",
       "      <td>0.132321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.217391</td>\n",
       "      <td>0.6</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.963959</td>\n",
       "      <td>0.140575</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.913043</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.963752</td>\n",
       "      <td>0.132321</td>\n",
       "      <td>0.962417</td>\n",
       "      <td>0.053650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.260870</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.272727</td>\n",
       "      <td>0.962359</td>\n",
       "      <td>0.052128</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.956522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.3750</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.962417</td>\n",
       "      <td>0.053650</td>\n",
       "      <td>0.965685</td>\n",
       "      <td>0.134938</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 122 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    var1(t-15)  var2(t-15)  var3(t-15)  var4(t-15)  var5(t-15)  var6(t-15)  \\\n",
       "15    0.333333         0.0    0.043478         0.2      0.0625    0.363636   \n",
       "16    0.333333         0.0    0.173913         0.0      0.7500    1.000000   \n",
       "17    0.333333         0.0    0.217391         0.0      0.0000    0.090909   \n",
       "18    0.333333         0.0    0.217391         0.6      1.0000    0.000000   \n",
       "19    0.333333         0.0    0.260870         0.0      0.0625    0.272727   \n",
       "\n",
       "    var7(t-15)  var8(t-15)  var1(t-14)  var2(t-14)  ...  var1(t-1)  var2(t-1)  \\\n",
       "15    0.968541    0.124869    0.333333         0.0  ...   0.666667        0.0   \n",
       "16    0.966379    0.206606    0.333333         0.0  ...   0.666667        0.0   \n",
       "17    0.971597    0.151268    0.333333         0.0  ...   0.666667        0.0   \n",
       "18    0.963959    0.140575    0.333333         0.0  ...   0.666667        0.0   \n",
       "19    0.962359    0.052128    0.333333         0.0  ...   0.666667        0.0   \n",
       "\n",
       "    var3(t-1)  var4(t-1)  var5(t-1)  var6(t-1)  var7(t-1)  var8(t-1)  \\\n",
       "15   0.434783        0.0     0.3125   0.000000   0.963500   0.131588   \n",
       "16   0.782609        0.0     0.4375   0.454545   0.963912   0.144309   \n",
       "17   0.782609        0.0     0.1250   0.090909   0.971597   0.151268   \n",
       "18   0.913043        0.0     0.0625   0.000000   0.963752   0.132321   \n",
       "19   0.956522        0.0     0.3750   0.090909   0.962417   0.053650   \n",
       "\n",
       "     var7(t)   var8(t)  \n",
       "15  0.963912  0.144309  \n",
       "16  0.971597  0.151268  \n",
       "17  0.963752  0.132321  \n",
       "18  0.962417  0.053650  \n",
       "19  0.965685  0.134938  \n",
       "\n",
       "[5 rows x 122 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Se elimina las otras variables en perido t para solo tener como salida Longitud y Latitud\n",
    "\n",
    "newReframed=reframed.drop(columns=['var1(t)','var2(t)','var3(t)','var4(t)', 'var5(t)', 'var6(t)'])\n",
    "print(newReframed.shape)\n",
    "newReframed.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3606, 120) (3606, 2) (401, 120) (401, 2)\n"
     ]
    }
   ],
   "source": [
    "#Separar datos como datos de entrenamiento y datos de prueba \n",
    "#Separa los datos en 80% (1700) train y 20% (725) validación\n",
    "\n",
    "values = newReframed.values\n",
    "train = values[0:3606, :]\n",
    "test = values[3606:4007, :]\n",
    "\n",
    "# split into input and outputs\n",
    "\n",
    "x_train, y_train = train[:, 0:120], train[:, 120:122]\n",
    "x_val, y_val = test[:, 0:120], test[:, 120:122]\n",
    "\n",
    "# reshape input to be 3D [samples, timesteps, features]\n",
    "#x_train = x_train.reshape((x_train.shape[0], 1,x_train.shape[1]))\n",
    "#x_val = x_val.reshape((x_val.shape[0], 1, x_val.shape[1]))\n",
    "print(x_train.shape, y_train.shape, x_val.shape, y_val.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Se define la red neuronal, cuando tenga la red lista, probare con distintas funciones de activación o nodos\n",
    "\n",
    "def crear_modeloFF():\n",
    "    model = Sequential() \n",
    "    model.add(Dense(120, input_dim=(120), kernel_initializer='normal',activation='sigmoid'))\n",
    "    model.add(Dense(2, kernel_initializer='normal', activation='sigmoid'))\n",
    "    model.compile(loss='mean_absolute_error',optimizer='Adam',metrics=[\"mse\"])\n",
    "    model.summary()\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_4 (Dense)              (None, 120)               14520     \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 2)                 242       \n",
      "=================================================================\n",
      "Total params: 14,762\n",
      "Trainable params: 14,762\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Train on 3606 samples, validate on 401 samples\n",
      "Epoch 1/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0168 - mse: 0.0044 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 2/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0152 - mse: 0.0042 - val_loss: 0.0131 - val_mse: 0.0025\n",
      "Epoch 3/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0150 - mse: 0.0042 - val_loss: 0.0115 - val_mse: 0.0025\n",
      "Epoch 4/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0149 - mse: 0.0042 - val_loss: 0.0124 - val_mse: 0.0025\n",
      "Epoch 5/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0149 - mse: 0.0042 - val_loss: 0.0128 - val_mse: 0.0025\n",
      "Epoch 6/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0149 - mse: 0.0042 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 7/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0123 - val_mse: 0.0025\n",
      "Epoch 8/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0115 - val_mse: 0.0025\n",
      "Epoch 9/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0149 - mse: 0.0042 - val_loss: 0.0122 - val_mse: 0.0025\n",
      "Epoch 10/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0119 - val_mse: 0.0025\n",
      "Epoch 11/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0116 - val_mse: 0.0025\n",
      "Epoch 12/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 13/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 14/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 15/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0123 - val_mse: 0.0025\n",
      "Epoch 16/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0123 - val_mse: 0.0025\n",
      "Epoch 17/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 18/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0119 - val_mse: 0.0025\n",
      "Epoch 19/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0120 - val_mse: 0.0025\n",
      "Epoch 20/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 21/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0147 - mse: 0.0042 - val_loss: 0.0141 - val_mse: 0.0025\n",
      "Epoch 22/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0147 - mse: 0.0042 - val_loss: 0.0117 - val_mse: 0.0025\n",
      "Epoch 23/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0148 - mse: 0.0042 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 24/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0146 - mse: 0.0042 - val_loss: 0.0120 - val_mse: 0.0025\n",
      "Epoch 25/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0147 - mse: 0.0042 - val_loss: 0.0122 - val_mse: 0.0025\n",
      "Epoch 26/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0146 - mse: 0.0042 - val_loss: 0.0126 - val_mse: 0.0025\n",
      "Epoch 27/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0146 - mse: 0.0042 - val_loss: 0.0143 - val_mse: 0.0025\n",
      "Epoch 28/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0145 - mse: 0.0042 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 29/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0146 - mse: 0.0041 - val_loss: 0.0129 - val_mse: 0.0025\n",
      "Epoch 30/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0145 - mse: 0.0042 - val_loss: 0.0119 - val_mse: 0.0025\n",
      "Epoch 31/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0145 - mse: 0.0041 - val_loss: 0.0120 - val_mse: 0.0025\n",
      "Epoch 32/40\n",
      "3606/3606 [==============================] - 6s 2ms/sample - loss: 0.0145 - mse: 0.0041 - val_loss: 0.0120 - val_mse: 0.0025\n",
      "Epoch 33/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0145 - mse: 0.0041 - val_loss: 0.0118 - val_mse: 0.0025\n",
      "Epoch 34/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0144 - mse: 0.0041 - val_loss: 0.0123 - val_mse: 0.0025\n",
      "Epoch 35/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0144 - mse: 0.0041 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 36/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0143 - mse: 0.0041 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 37/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0144 - mse: 0.0041 - val_loss: 0.0118 - val_mse: 0.0025\n",
      "Epoch 38/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0143 - mse: 0.0041 - val_loss: 0.0122 - val_mse: 0.0025\n",
      "Epoch 39/40\n",
      "3606/3606 [==============================] - 5s 1ms/sample - loss: 0.0143 - mse: 0.0041 - val_loss: 0.0121 - val_mse: 0.0025\n",
      "Epoch 40/40\n",
      "3606/3606 [==============================] - 4s 1ms/sample - loss: 0.0142 - mse: 0.0041 - val_loss: 0.0125 - val_mse: 0.0025\n"
     ]
    }
   ],
   "source": [
    "#Despues de tener lista la red, variare EPOCHS para ver como mejoran los resultados\n",
    "EPOCHS=40\n",
    "\n",
    "model = crear_modeloFF()\n",
    "\n",
    "history=model.fit(x_train,y_train,epochs=EPOCHS,validation_data=(x_val,y_val),batch_size=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Renombrar columnas de variable predicha y validación\n",
    "\n",
    "results=model.predict(x_val)\n",
    "results = pd.DataFrame(results)\n",
    "results.columns = results.columns\n",
    "results=results.rename(columns = {0:'Longitud', 1:'Latitud'})\n",
    "#print(results)\n",
    "\n",
    "y_val = pd.DataFrame(y_val)\n",
    "y_val.columns = y_val.columns\n",
    "y_val=y_val.rename(columns = {0:'Longitud', 1:'Latitud'})\n",
    "#print(y_val)\n",
    "\n",
    "#Permite visualizar que tanto se acerca la predicción con los valores de validación\n",
    "plt.scatter(range(len(y_val['Longitud'])),y_val['Longitud'],c='g')\n",
    "plt.scatter(range(len(results['Longitud'])),results['Longitud'],c='r')\n",
    "plt.title('Validate_Longitud')\n",
    "plt.show()\n",
    "\n",
    "plt.scatter(range(len(y_val['Latitud'])),y_val['Latitud'],c='g')\n",
    "plt.scatter(range(len(results['Latitud'])),results['Latitud'],c='r')\n",
    "plt.title('Validate_Latitud')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Permite graficar la pérdida LOSS tanto del conjunto de ENTENAMIENTO(azul)  como de VALIDACION(naranja)\n",
    "\n",
    "plt.ylim(0.005, 0.025)\n",
    "plt.plot(history.history['loss'])\n",
    "plt.title('loss')\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('validate loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.ylim(0.001, 0.006)\n",
    "plt.title('Accuracy')\n",
    "plt.plot(history.history['mse'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Longitud   Latitud      Var3      Var4      Var5      Var6      Var7  \\\n",
      "0    0.966992  0.132581  0.966992  0.966992  0.966992  0.132581  0.966992   \n",
      "1    0.966208  0.136862  0.966208  0.966208  0.966208  0.136862  0.966208   \n",
      "2    0.966293  0.133487  0.966293  0.966293  0.966293  0.133487  0.966293   \n",
      "3    0.967860  0.141865  0.967860  0.967860  0.967860  0.141865  0.967860   \n",
      "4    0.965822  0.134847  0.965822  0.965822  0.965822  0.134847  0.965822   \n",
      "5    0.965898  0.133598  0.965898  0.965898  0.965898  0.133598  0.965898   \n",
      "6    0.963966  0.129582  0.963966  0.963966  0.963966  0.129582  0.963966   \n",
      "7    0.965979  0.131995  0.965979  0.965979  0.965979  0.131995  0.965979   \n",
      "8    0.966427  0.138938  0.966427  0.966427  0.966427  0.138938  0.966427   \n",
      "9    0.965617  0.137413  0.965617  0.965617  0.965617  0.137413  0.965617   \n",
      "10   0.965929  0.131950  0.965929  0.965929  0.965929  0.131950  0.965929   \n",
      "11   0.964658  0.135430  0.964658  0.964658  0.964658  0.135430  0.964658   \n",
      "12   0.966560  0.133741  0.966560  0.966560  0.966560  0.133741  0.966560   \n",
      "13   0.965367  0.132156  0.965367  0.965367  0.965367  0.132156  0.965367   \n",
      "14   0.965572  0.132131  0.965572  0.965572  0.965572  0.132131  0.965572   \n",
      "15   0.966727  0.133748  0.966727  0.966727  0.966727  0.133748  0.966727   \n",
      "16   0.965771  0.137244  0.965771  0.965771  0.965771  0.137244  0.965771   \n",
      "17   0.966424  0.134031  0.966424  0.966424  0.966424  0.134031  0.966424   \n",
      "18   0.965960  0.136846  0.965960  0.965960  0.965960  0.136846  0.965960   \n",
      "19   0.965792  0.130577  0.965792  0.965792  0.965792  0.130577  0.965792   \n",
      "20   0.966302  0.133982  0.966302  0.966302  0.966302  0.133982  0.966302   \n",
      "21   0.965781  0.135959  0.965781  0.965781  0.965781  0.135959  0.965781   \n",
      "22   0.965934  0.132512  0.965934  0.965934  0.965934  0.132512  0.965934   \n",
      "23   0.966073  0.134609  0.966073  0.966073  0.966073  0.134609  0.966073   \n",
      "24   0.965427  0.140831  0.965427  0.965427  0.965427  0.140831  0.965427   \n",
      "25   0.966421  0.133131  0.966421  0.966421  0.966421  0.133131  0.966421   \n",
      "26   0.965066  0.132588  0.965066  0.965066  0.965066  0.132588  0.965066   \n",
      "27   0.966096  0.136686  0.966096  0.966096  0.966096  0.136686  0.966096   \n",
      "28   0.965422  0.134420  0.965422  0.965422  0.965422  0.134420  0.965422   \n",
      "29   0.966160  0.134535  0.966160  0.966160  0.966160  0.134535  0.966160   \n",
      "..        ...       ...       ...       ...       ...       ...       ...   \n",
      "371  0.965130  0.137693  0.965130  0.965130  0.965130  0.137693  0.965130   \n",
      "372  0.965583  0.140045  0.965583  0.965583  0.965583  0.140045  0.965583   \n",
      "373  0.965658  0.133044  0.965658  0.965658  0.965658  0.133044  0.965658   \n",
      "374  0.966217  0.132332  0.966217  0.966217  0.966217  0.132332  0.966217   \n",
      "375  0.966066  0.137161  0.966066  0.966066  0.966066  0.137161  0.966066   \n",
      "376  0.965298  0.137732  0.965298  0.965298  0.965298  0.137732  0.965298   \n",
      "377  0.965270  0.138282  0.965270  0.965270  0.965270  0.138282  0.965270   \n",
      "378  0.966167  0.138904  0.966167  0.966167  0.966167  0.138904  0.966167   \n",
      "379  0.966165  0.134469  0.966165  0.966165  0.966165  0.134469  0.966165   \n",
      "380  0.964850  0.132948  0.964850  0.964850  0.964850  0.132948  0.964850   \n",
      "381  0.965858  0.133917  0.965858  0.965858  0.965858  0.133917  0.965858   \n",
      "382  0.965978  0.132100  0.965978  0.965978  0.965978  0.132100  0.965978   \n",
      "383  0.965202  0.139079  0.965202  0.965202  0.965202  0.139079  0.965202   \n",
      "384  0.966455  0.134658  0.966455  0.966455  0.966455  0.134658  0.966455   \n",
      "385  0.967067  0.131647  0.967067  0.967067  0.967067  0.131647  0.967067   \n",
      "386  0.966339  0.135397  0.966339  0.966339  0.966339  0.135397  0.966339   \n",
      "387  0.967309  0.137379  0.967309  0.967309  0.967309  0.137379  0.967309   \n",
      "388  0.966170  0.135818  0.966170  0.966170  0.966170  0.135818  0.966170   \n",
      "389  0.966441  0.140406  0.966441  0.966441  0.966441  0.140406  0.966441   \n",
      "390  0.964992  0.134620  0.964992  0.964992  0.964992  0.134620  0.964992   \n",
      "391  0.965060  0.121036  0.965060  0.965060  0.965060  0.121036  0.965060   \n",
      "392  0.965889  0.130714  0.965889  0.965889  0.965889  0.130714  0.965889   \n",
      "393  0.962554  0.108544  0.962554  0.962554  0.962554  0.108544  0.962554   \n",
      "394  0.966001  0.132847  0.966001  0.966001  0.966001  0.132847  0.966001   \n",
      "395  0.966282  0.121246  0.966282  0.966282  0.966282  0.121246  0.966282   \n",
      "396  0.970185  0.123964  0.970185  0.970185  0.970185  0.123964  0.970185   \n",
      "397  0.966898  0.135561  0.966898  0.966898  0.966898  0.135561  0.966898   \n",
      "398  0.964989  0.137138  0.964989  0.964989  0.964989  0.137138  0.964989   \n",
      "399  0.965925  0.136344  0.965925  0.965925  0.965925  0.136344  0.965925   \n",
      "400  0.968929  0.136651  0.968929  0.968929  0.968929  0.136651  0.968929   \n",
      "\n",
      "         Var8  \n",
      "0    0.132581  \n",
      "1    0.136862  \n",
      "2    0.133487  \n",
      "3    0.141865  \n",
      "4    0.134847  \n",
      "5    0.133598  \n",
      "6    0.129582  \n",
      "7    0.131995  \n",
      "8    0.138938  \n",
      "9    0.137413  \n",
      "10   0.131950  \n",
      "11   0.135430  \n",
      "12   0.133741  \n",
      "13   0.132156  \n",
      "14   0.132131  \n",
      "15   0.133748  \n",
      "16   0.137244  \n",
      "17   0.134031  \n",
      "18   0.136846  \n",
      "19   0.130577  \n",
      "20   0.133982  \n",
      "21   0.135959  \n",
      "22   0.132512  \n",
      "23   0.134609  \n",
      "24   0.140831  \n",
      "25   0.133131  \n",
      "26   0.132588  \n",
      "27   0.136686  \n",
      "28   0.134420  \n",
      "29   0.134535  \n",
      "..        ...  \n",
      "371  0.137693  \n",
      "372  0.140045  \n",
      "373  0.133044  \n",
      "374  0.132332  \n",
      "375  0.137161  \n",
      "376  0.137732  \n",
      "377  0.138282  \n",
      "378  0.138904  \n",
      "379  0.134469  \n",
      "380  0.132948  \n",
      "381  0.133917  \n",
      "382  0.132100  \n",
      "383  0.139079  \n",
      "384  0.134658  \n",
      "385  0.131647  \n",
      "386  0.135397  \n",
      "387  0.137379  \n",
      "388  0.135818  \n",
      "389  0.140406  \n",
      "390  0.134620  \n",
      "391  0.121036  \n",
      "392  0.130714  \n",
      "393  0.108544  \n",
      "394  0.132847  \n",
      "395  0.121246  \n",
      "396  0.123964  \n",
      "397  0.135561  \n",
      "398  0.137138  \n",
      "399  0.136344  \n",
      "400  0.136651  \n",
      "\n",
      "[401 rows x 8 columns]\n",
      "     Longitud   Latitud      Var3      Var4      Var5      Var6      Var7  \\\n",
      "0    0.961360  0.128630  0.128630  0.128630  0.961360  0.128630  0.961360   \n",
      "1    0.964531  0.143047  0.143047  0.143047  0.964531  0.143047  0.964531   \n",
      "2    0.964343  0.128976  0.128976  0.128976  0.964343  0.128976  0.964343   \n",
      "3    0.984915  0.170485  0.170485  0.170485  0.984915  0.170485  0.984915   \n",
      "4    0.967698  0.125588  0.125588  0.125588  0.967698  0.125588  0.967698   \n",
      "5    0.962615  0.124631  0.124631  0.124631  0.962615  0.124631  0.962615   \n",
      "6    0.965681  0.171541  0.171541  0.171541  0.965681  0.171541  0.965681   \n",
      "7    0.965269  0.133904  0.133904  0.133904  0.965269  0.133904  0.965269   \n",
      "8    0.967741  0.128791  0.128791  0.128791  0.967741  0.128791  0.967741   \n",
      "9    0.967873  0.128115  0.128115  0.128115  0.967873  0.128115  0.967873   \n",
      "10   0.971461  0.151972  0.151972  0.151972  0.971461  0.151972  0.971461   \n",
      "11   0.978595  0.167271  0.167271  0.167271  0.978595  0.167271  0.978595   \n",
      "12   0.963744  0.130476  0.130476  0.130476  0.963744  0.130476  0.963744   \n",
      "13   0.964368  0.166051  0.166051  0.166051  0.964368  0.166051  0.964368   \n",
      "14   0.967746  0.128700  0.128700  0.128700  0.967746  0.128700  0.967746   \n",
      "15   0.962209  0.049678  0.049678  0.049678  0.962209  0.049678  0.962209   \n",
      "16   0.968597  0.125502  0.125502  0.125502  0.968597  0.125502  0.968597   \n",
      "17   0.966679  0.127943  0.127943  0.127943  0.966679  0.127943  0.966679   \n",
      "18   0.964589  0.143270  0.143270  0.143270  0.964589  0.143270  0.964589   \n",
      "19   0.988263  0.157019  0.157019  0.157019  0.988263  0.157019  0.988263   \n",
      "20   0.965118  0.135900  0.135900  0.135900  0.965118  0.135900  0.965118   \n",
      "21   0.963381  0.131047  0.131047  0.131047  0.963381  0.131047  0.963381   \n",
      "22   0.966384  0.126737  0.126737  0.126737  0.966384  0.126737  0.966384   \n",
      "23   0.962364  0.051195  0.051195  0.051195  0.962364  0.051195  0.962364   \n",
      "24   0.964798  0.131191  0.131191  0.131191  0.964798  0.131191  0.964798   \n",
      "25   0.964676  0.132241  0.132241  0.132241  0.964676  0.132241  0.964676   \n",
      "26   0.964091  0.137821  0.137821  0.137821  0.964091  0.137821  0.964091   \n",
      "27   0.963941  0.140705  0.140705  0.140705  0.963941  0.140705  0.963941   \n",
      "28   0.964227  0.136908  0.136908  0.136908  0.964227  0.136908  0.964227   \n",
      "29   0.967445  0.126905  0.126905  0.126905  0.967445  0.126905  0.967445   \n",
      "..        ...       ...       ...       ...       ...       ...       ...   \n",
      "371  0.960314  0.070854  0.070854  0.070854  0.960314  0.070854  0.960314   \n",
      "372  0.966363  0.127352  0.127352  0.127352  0.966363  0.127352  0.966363   \n",
      "373  0.963983  0.138871  0.138871  0.138871  0.963983  0.138871  0.963983   \n",
      "374  0.964174  0.138004  0.138004  0.138004  0.964174  0.138004  0.964174   \n",
      "375  0.964026  0.144408  0.144408  0.144408  0.964026  0.144408  0.964026   \n",
      "376  0.960776  0.067750  0.067750  0.067750  0.960776  0.067750  0.960776   \n",
      "377  0.985774  0.170363  0.170363  0.170363  0.985774  0.170363  0.985774   \n",
      "378  0.962275  0.047482  0.047482  0.047482  0.962275  0.047482  0.962275   \n",
      "379  0.962417  0.053650  0.053650  0.053650  0.962417  0.053650  0.962417   \n",
      "380  0.963812  0.131311  0.131311  0.131311  0.963812  0.131311  0.963812   \n",
      "381  0.962926  0.125528  0.125528  0.125528  0.962926  0.125528  0.962926   \n",
      "382  0.963137  0.130162  0.130162  0.130162  0.963137  0.130162  0.963137   \n",
      "383  0.963983  0.138871  0.138871  0.138871  0.963983  0.138871  0.963983   \n",
      "384  0.964006  0.130019  0.130019  0.130019  0.964006  0.130019  0.964006   \n",
      "385  0.963428  0.129784  0.129784  0.129784  0.963428  0.129784  0.963428   \n",
      "386  0.961495  0.129654  0.129654  0.129654  0.961495  0.129654  0.961495   \n",
      "387  0.966652  0.126578  0.126578  0.126578  0.966652  0.126578  0.966652   \n",
      "388  0.962578  0.048357  0.048357  0.048357  0.962578  0.048357  0.962578   \n",
      "389  0.965490  0.134375  0.134375  0.134375  0.965490  0.134375  0.965490   \n",
      "390  0.963171  0.130114  0.130114  0.130114  0.963171  0.130114  0.963171   \n",
      "391  0.965072  0.135950  0.135950  0.135950  0.965072  0.135950  0.965072   \n",
      "392  0.963565  0.127729  0.127729  0.127729  0.963565  0.127729  0.963565   \n",
      "393  0.964657  0.135158  0.135158  0.135158  0.964657  0.135158  0.964657   \n",
      "394  0.964243  0.138246  0.138246  0.138246  0.964243  0.138246  0.964243   \n",
      "395  0.964045  0.137678  0.137678  0.137678  0.964045  0.137678  0.964045   \n",
      "396  0.963898  0.140834  0.140834  0.140834  0.963898  0.140834  0.963898   \n",
      "397  0.962045  0.127814  0.127814  0.127814  0.962045  0.127814  0.962045   \n",
      "398  0.963789  0.132438  0.132438  0.132438  0.963789  0.132438  0.963789   \n",
      "399  0.965321  0.134489  0.134489  0.134489  0.965321  0.134489  0.965321   \n",
      "400  0.964191  0.164557  0.164557  0.164557  0.964191  0.164557  0.964191   \n",
      "\n",
      "         Var8  \n",
      "0    0.128630  \n",
      "1    0.143047  \n",
      "2    0.128976  \n",
      "3    0.170485  \n",
      "4    0.125588  \n",
      "5    0.124631  \n",
      "6    0.171541  \n",
      "7    0.133904  \n",
      "8    0.128791  \n",
      "9    0.128115  \n",
      "10   0.151972  \n",
      "11   0.167271  \n",
      "12   0.130476  \n",
      "13   0.166051  \n",
      "14   0.128700  \n",
      "15   0.049678  \n",
      "16   0.125502  \n",
      "17   0.127943  \n",
      "18   0.143270  \n",
      "19   0.157019  \n",
      "20   0.135900  \n",
      "21   0.131047  \n",
      "22   0.126737  \n",
      "23   0.051195  \n",
      "24   0.131191  \n",
      "25   0.132241  \n",
      "26   0.137821  \n",
      "27   0.140705  \n",
      "28   0.136908  \n",
      "29   0.126905  \n",
      "..        ...  \n",
      "371  0.070854  \n",
      "372  0.127352  \n",
      "373  0.138871  \n",
      "374  0.138004  \n",
      "375  0.144408  \n",
      "376  0.067750  \n",
      "377  0.170363  \n",
      "378  0.047482  \n",
      "379  0.053650  \n",
      "380  0.131311  \n",
      "381  0.125528  \n",
      "382  0.130162  \n",
      "383  0.138871  \n",
      "384  0.130019  \n",
      "385  0.129784  \n",
      "386  0.129654  \n",
      "387  0.126578  \n",
      "388  0.048357  \n",
      "389  0.134375  \n",
      "390  0.130114  \n",
      "391  0.135950  \n",
      "392  0.127729  \n",
      "393  0.135158  \n",
      "394  0.138246  \n",
      "395  0.137678  \n",
      "396  0.140834  \n",
      "397  0.127814  \n",
      "398  0.132438  \n",
      "399  0.134489  \n",
      "400  0.164557  \n",
      "\n",
      "[401 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "#Agregar 4 columnas falsasa para poder invertir valores a original\n",
    "\n",
    "results['Var3'] = results['Longitud']\n",
    "results['Var4'] = results['Longitud']\n",
    "results['Var5'] = results['Longitud']\n",
    "results['Var6'] = results['Latitud']\n",
    "results['Var7'] = results['Longitud']\n",
    "results['Var8'] = results['Latitud']\n",
    "print(results)\n",
    "\n",
    "y_val['Var3'] = y_val[\"Latitud\"]\n",
    "y_val['Var4'] = y_val[\"Latitud\"]\n",
    "y_val['Var5'] = y_val[\"Longitud\"]\n",
    "y_val['Var6'] = y_val[\"Latitud\"]\n",
    "y_val['Var7'] = y_val[\"Longitud\"]\n",
    "y_val['Var8'] = y_val[\"Latitud\"]\n",
    "print(y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      0.221413\n",
      "1      0.065933\n",
      "2      0.076668\n",
      "3     -0.670464\n",
      "4     -0.073769\n",
      "5      0.129082\n",
      "6     -0.067421\n",
      "7      0.027924\n",
      "8     -0.051666\n",
      "9     -0.088669\n",
      "10    -0.217484\n",
      "11    -0.547874\n",
      "12     0.110695\n",
      "13     0.039276\n",
      "14    -0.085503\n",
      "15     0.177605\n",
      "16    -0.111084\n",
      "17    -0.010025\n",
      "18     0.053871\n",
      "19    -0.883408\n",
      "20     0.046509\n",
      "21     0.094330\n",
      "22    -0.017662\n",
      "23     0.145813\n",
      "24     0.024704\n",
      "25     0.068596\n",
      "26     0.038345\n",
      "27     0.084755\n",
      "28     0.046967\n",
      "29    -0.050529\n",
      "         ...   \n",
      "371    0.189339\n",
      "372   -0.030640\n",
      "373    0.065842\n",
      "374    0.080338\n",
      "375    0.080185\n",
      "376    0.177795\n",
      "377   -0.806091\n",
      "378    0.153015\n",
      "379    0.147354\n",
      "380    0.040787\n",
      "381    0.115242\n",
      "382    0.111694\n",
      "383    0.047928\n",
      "384    0.096268\n",
      "385    0.143074\n",
      "386    0.190453\n",
      "387    0.025848\n",
      "388    0.141212\n",
      "389    0.037399\n",
      "390    0.071564\n",
      "391   -0.000465\n",
      "392    0.091354\n",
      "393   -0.082664\n",
      "394    0.069107\n",
      "395    0.087936\n",
      "396    0.247162\n",
      "397    0.190773\n",
      "398    0.047180\n",
      "399    0.023712\n",
      "400    0.186241\n",
      "Name: Longitud, Length: 401, dtype: float32\n",
      "0      0.027054\n",
      "1     -0.042351\n",
      "2      0.030888\n",
      "3     -0.195965\n",
      "4      0.063396\n",
      "5      0.061398\n",
      "6     -0.287308\n",
      "7     -0.013069\n",
      "8      0.069485\n",
      "9      0.063671\n",
      "10    -0.137093\n",
      "11    -0.218021\n",
      "12     0.022350\n",
      "13    -0.232094\n",
      "14     0.023491\n",
      "15     0.575649\n",
      "16     0.080402\n",
      "17     0.041691\n",
      "18    -0.043995\n",
      "19    -0.181057\n",
      "20    -0.013138\n",
      "21     0.033634\n",
      "22     0.039543\n",
      "23     0.571159\n",
      "24     0.066006\n",
      "25     0.006092\n",
      "26    -0.035828\n",
      "27    -0.027519\n",
      "28    -0.017040\n",
      "29     0.052242\n",
      "         ...   \n",
      "371    0.457664\n",
      "372    0.086910\n",
      "373   -0.039902\n",
      "374   -0.038834\n",
      "375   -0.049625\n",
      "376    0.479191\n",
      "377   -0.219669\n",
      "378    0.625996\n",
      "379    0.553391\n",
      "380    0.011211\n",
      "381    0.057442\n",
      "382    0.013275\n",
      "383    0.001419\n",
      "384    0.031761\n",
      "385    0.012760\n",
      "386    0.039326\n",
      "387    0.073959\n",
      "388    0.598866\n",
      "389    0.041298\n",
      "390    0.030853\n",
      "391   -0.102123\n",
      "392    0.020435\n",
      "393   -0.182232\n",
      "394   -0.036968\n",
      "395   -0.112511\n",
      "396   -0.115517\n",
      "397    0.053047\n",
      "398    0.032185\n",
      "399    0.012707\n",
      "400   -0.191082\n",
      "Name: Latitud, Length: 401, dtype: float32\n"
     ]
    }
   ],
   "source": [
    "#Primero se inviernten los valores de \"y_val\" y \"results\" a su valor original\n",
    "inverted_res = scaler.inverse_transform(results.values)\n",
    "compara_res = pd.DataFrame(inverted_res)\n",
    "\n",
    "inverted_y_val = scaler.inverse_transform(y_val.values)\n",
    "compara_y_val = pd.DataFrame(inverted_y_val)\n",
    "\n",
    "#Segundo se asgina nombre a las columnas de cada variable\n",
    "compara_y_val=compara_y_val.rename(columns = {0:'Falso1', 1:'Falso2', 2:'Falso3', 3:'Falso4', 4:'Falso5', 5:'Falso6', 6:'Longitud', 7:'Latitud'})\n",
    "compara_res=compara_res.rename(columns = {0:'Falso1', 1:'Falso2', 2:'Falso3', 3:'Falso4', 4:'Falso5', 5:'Falso6', 6:'Longitud', 7:'Latitud'})\n",
    "\n",
    "#Tercero se eliminan las variables no necesarias\n",
    "compara_res = compara_res.drop(['Falso1', 'Falso2', 'Falso3', 'Falso4', 'Falso5', 'Falso6'], axis=1)\n",
    "compara_y_val = compara_y_val.drop(['Falso1', 'Falso2', 'Falso3', 'Falso4', 'Falso5', 'Falso6'], axis=1)\n",
    "#print(compara_y_val)\n",
    "#print(compara_res)\n",
    "\n",
    "#Cuarto crea variable \"diferencia\" entre valores de resultado y validación, tanto para longitud como latitud\n",
    "diferencia_lon = compara_res['Longitud'] - compara_y_val['Longitud']\n",
    "diferencia_lat  = compara_res['Latitud'] - compara_y_val['Latitud']\n",
    "print(diferencia_lon)\n",
    "print(diferencia_lat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.0014606113143238973"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(compara_y_val, compara_res, multioutput='variance_weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.001008000092462824"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(compara_y_val['Longitud'], compara_res['Longitud'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.015065207601115294"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(compara_y_val['Latitud'], compara_res['Latitud'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>real</th>\n",
       "      <th>prediccion</th>\n",
       "      <th>diferencia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-71.646622</td>\n",
       "      <td>-71.425209</td>\n",
       "      <td>0.221413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-71.521942</td>\n",
       "      <td>-71.456009</td>\n",
       "      <td>0.065933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-71.529350</td>\n",
       "      <td>-71.452682</td>\n",
       "      <td>0.076668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-70.720596</td>\n",
       "      <td>-71.391060</td>\n",
       "      <td>-0.670464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-71.397423</td>\n",
       "      <td>-71.471191</td>\n",
       "      <td>-0.073769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-71.597260</td>\n",
       "      <td>-71.468178</td>\n",
       "      <td>0.129082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-71.476715</td>\n",
       "      <td>-71.544136</td>\n",
       "      <td>-0.067421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-71.492928</td>\n",
       "      <td>-71.465004</td>\n",
       "      <td>0.027924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-71.395752</td>\n",
       "      <td>-71.447418</td>\n",
       "      <td>-0.051666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-71.390572</td>\n",
       "      <td>-71.479240</td>\n",
       "      <td>-0.088669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        real  prediccion  diferencia\n",
       "0 -71.646622  -71.425209    0.221413\n",
       "1 -71.521942  -71.456009    0.065933\n",
       "2 -71.529350  -71.452682    0.076668\n",
       "3 -70.720596  -71.391060   -0.670464\n",
       "4 -71.397423  -71.471191   -0.073769\n",
       "5 -71.597260  -71.468178    0.129082\n",
       "6 -71.476715  -71.544136   -0.067421\n",
       "7 -71.492928  -71.465004    0.027924\n",
       "8 -71.395752  -71.447418   -0.051666\n",
       "9 -71.390572  -71.479240   -0.088669"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Compara Longitudes reales, predichos y su diferencia.\n",
    "compara_lon = pd.DataFrame(np.array([compara_y_val['Longitud'], compara_res['Longitud']])).transpose()\n",
    "compara_lon.columns = ['real', 'prediccion']\n",
    "\n",
    "compara_lon2 = pd.DataFrame(compara_lon)\n",
    "compara_lon2.columns = ['real', 'prediccion']\n",
    "compara_lon2['diferencia'] = diferencia_lon\n",
    "compara_lon2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>real</th>\n",
       "      <th>prediccion</th>\n",
       "      <th>diferencia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-33.040257</td>\n",
       "      <td>-33.013203</td>\n",
       "      <td>0.027054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-32.941540</td>\n",
       "      <td>-32.983891</td>\n",
       "      <td>-0.042351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-33.037884</td>\n",
       "      <td>-33.006996</td>\n",
       "      <td>0.030888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-32.753666</td>\n",
       "      <td>-32.949631</td>\n",
       "      <td>-0.195965</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        real  prediccion  diferencia\n",
       "0 -33.040257  -33.013203    0.027054\n",
       "1 -32.941540  -32.983891   -0.042351\n",
       "2 -33.037884  -33.006996    0.030888\n",
       "3 -32.753666  -32.949631   -0.195965"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Compara Latitudes reales, predichos y su diferencia.\n",
    "compara_lat = pd.DataFrame(np.array([compara_y_val['Latitud'], compara_res['Latitud']])).transpose()\n",
    "compara_lat.columns = ['real', 'prediccion']\n",
    "\n",
    "compara_lat2 = pd.DataFrame(compara_lat)\n",
    "compara_lat2.columns = ['real', 'prediccion']\n",
    "compara_lat2['diferencia'] = diferencia_lat\n",
    "compara_lat2.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Descarga archivo .CSV con predicción de longitud y latitud\n",
    "\n",
    "prediccion_lon = pd.DataFrame(compara_lon2)\n",
    "prediccion_lon.to_csv('8v_15d_40e_pronostico_longitud.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Descarga archivo .CSV con predicción de longitud y latitud\n",
    "\n",
    "prediccion_lat = pd.DataFrame(compara_lat2)\n",
    "prediccion_lat.to_csv('8v_15d_40e_pronostico_latitud.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a35d061d0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Gráfico de los resultados de la predicción versus los datos reales\n",
    "#de variable \"Longitud del delito\"\n",
    "\n",
    "compara_lon['real'].plot() #Color azul\n",
    "compara_lon['prediccion'].plot() #Color naranjo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a35eeec50>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Gráfico de los resultados de la predicción versus los datos reales\n",
    "#de variable \"Latitud del delito\"\n",
    "\n",
    "compara_lat['real'].plot() #Color azul\n",
    "compara_lat['prediccion'].plot() #Color naranjo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
